
block LINEAR_MODEL
{
	identities
	{
		E[][ c[1] ] - c[] = sigma * lambda_3 * E[][ a[1] - k[1] ] ;

#		r[] = lambda_3 * (a[1] - k[1]) ;

		E[][ k[1] ] = lambda_1 * k[] + lambda_2 * a[] + (1 - lambda_1 - lambda_2) * c[] ;

#		y[] = alpha * a[] + (1 - alpha) * k[] ;

#		c[] = eta_ck * k[] + eta_ca * a[] ;

#		k[1] = eta_kk * k[] + eta_ka * a[] ; 

	};	

	calibration
	{
		alpha = 0.667 ;
		sigma = 1 ;
		r = .015 ;
		g = .005 ;
		delta = .025 ;

		lambda_1 = (1 + r) / (1 + g) ;

		lambda_2 = alpha * (r + delta) / (1 - alpha) * (1 + g) ;

		lambda_3 = alpha * (r + delta) / (1 + r) ;

#		eta_ca = ( - eta_ck * lambda 2 + sigma * lambda_3 * (rho_a - lambda_2) ) /
#				(rho - 1 + (1 - lambda_1 - lambda_2) * (eta_ck + sigma * lambda_3)) ;

#		eta_ck = 1/2 * (1 - lambda_1 - lambda_2) ^ (-1) * (
#
#				- (lambda_1 - 1  + simga * lambda_3 * (1 - lambda_2 - lambda_1))
#				- (
#						(lambda_1 - 1  + simga * lambda_3 * (1 - lambda_2 - lambda_1)) ^ 2
#						* 4 * sigma * lambda_3 * lambda_1 
#						* (1 - lambda_1 - lambda_2)
#					) ^ (1 / 2)
#
#		);

#		eta_kk = lambda_1 + (1 - lambda_1 - lambda_2) * eta_ck ;
#		eta_ka = lambda_2 + (1 - lambda_1 - lambda_2) * eta_ca
	};
};

block OIL_PRICE_SHOCK
{
    identities
    {	
    	# real price of oil law of motion 
        a[] = rho_a * a[-1] + epsilon_a[];
    };
    shocks
    {
        epsilon_a[];
    };
    calibration
    {
    rho_a = .5 ; # AR(1) parameter real oil price
    };
};


